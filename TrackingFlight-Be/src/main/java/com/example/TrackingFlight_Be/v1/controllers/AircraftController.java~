package com.example.TrackingFlight_Be.v1.controllers;

import com.example.TrackingFlight_Be.v1.dto.request.AircraftCreationRequest;
import com.example.TrackingFlight_Be.v1.dto.request.ApiResponse;
import com.example.TrackingFlight_Be.v1.entity.Aircraft;
import com.example.TrackingFlight_Be.v1.services.AircraftService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/aircraft")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE,makeFinal = true)
public class AircraftController {
    AircraftService aircraftService;


    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ApiResponse<Aircraft> createAircraft(
            @RequestParam("aircraftName") String aircraftName,
            @RequestParam("aircraftCode") String aircraftCode,
            @RequestParam("aircraftType") String aircraftType,
            @RequestParam("airline") String airline,
            @RequestParam("seat") String seat,
            @RequestParam("quantity") String quantity,
            @RequestParam("ghichu") String ghichu,
            @RequestParam("aircraftPicture") MultipartFile aircraftPicture) {

        // Tạo DTO từ các tham số
        AircraftCreationRequest request = new AircraftCreationRequest();
        request.setAircraftName(aircraftName);
        request.setAircraftCode(aircraftCode);
        request.setAircraftType(aircraftType);
        request.setAirline(airline);
        request.setSeat(Long.parseLong(seat));
        request.setQuantity(Long.parseLong(quantity));
        request.setGhichu(ghichu);
        request.setAircraftPicture(aircraftPicture);

        // Xử lý và trả về kết quả
        ApiResponse<Aircraft> apiResponse = new ApiResponse<>();
        apiResponse.setResult(aircraftService.createAircraft(request));
        return apiResponse;
    }

    // Lấy danh sách tất cả Staff
    @GetMapping
    public List<Aircraft> getStaffs() {
        return aircraftService.getAircrafts();
    }

    // Lấy thông tin Staff theo mã code
    @GetMapping("/{aircraftCode}")
    public Aircraft getAircraft(@PathVariable String aircraftId) {
        return aircraftService.getAircraft(aircraftId);
    }

    // Cập nhật thông tin Staff
    @PutMapping(value = "/{aircraftCode}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Aircraft updateStaff(
            @PathVariable String aircraftId,
            @RequestBody @Valid AircraftCreationRequest request) {
        return aircraftService.updateAircraft(aircraftId, request);
    }

    // Xóa Staff theo mã code
    @DeleteMapping("/{aircraftCode}")
    public ResponseEntity<Map<String, String>> deleteStaff(@PathVariable String aircraftId) {
        aircraftService.deleteAircraft(aircraftId);
        Map<String, String> response = new HashMap<>();
        response.put("message", "User with id " + aircraftId + " has been deleted");
        return ResponseEntity.ok(response);
    }
}
